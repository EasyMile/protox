defmodule Protox.EncodeJson do

  @moduledoc false
  # Internal. Functions to encode types to JSON.
  # TODO. encode/1 is not internal


  @spec encode(struct) :: String.t
  def encode(msg) do
    # A compilation error at the line below usually happen if `msg`
    # is not a struct generated by protox.
    msg.__struct__.encode_json(msg)
  end


  @spec encode_json_bool(boolean) :: String.t
  def encode_json_bool(false), do: "false"
  def encode_json_bool(true) , do: "true"


  @spec encode_json_int32(integer) :: integer
  def encode_json_int32(value), do: value


  @spec encode_json_sint32(integer) :: integer
  def encode_json_sint32(value), do: value


  @spec encode_json_uint32(non_neg_integer) :: non_neg_integer
  def encode_json_uint32(value), do: value


  @spec encode_json_fixed32(integer) :: integer
  def encode_json_fixed32(value), do: value


  @spec encode_json_sfixed32(integer) :: integer
  def encode_json_sfixed32(value), do: value


  @spec encode_json_int64(integer) :: String.t
  def encode_json_int64(value), do: "#{value}"


  @spec encode_json_sint64(integer) :: String.t
  def encode_json_sint64(value), do: "#{value}"


  @spec encode_json_uint64(non_neg_integer) :: String.t
  def encode_json_uint64(value), do: "#{value}"


  @spec encode_json_fixed64(integer) :: String.t
  def encode_json_fixed64(value), do: "#{value}"


  @spec encode_json_sfixed64(integer) :: String.t
  def encode_json_sfixed64(value), do: "#{value}"


  @spec encode_json_double(float) :: float
  def encode_json_double(value), do: value


  @spec encode_json_float(float) :: float
  def encode_json_float(value), do: value


  @spec encode_json_string(String.t) :: String.t
  def encode_json_string(value), do: value


  @spec encode_json_bytes(binary) :: binary
  def encode_json_bytes(value), do: value |> Base.encode64()


  @spec encode_json_enum(atom) :: atom
  def encode_json_enum(value), do: value


  @spec encode_json_message(struct) :: %{}
  def encode_json_message(msg), do: msg.__struct__.prepare_for_json(msg)

end
